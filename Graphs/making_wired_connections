class Solution {
public:
    void dfs(int i,vector<bool>& vis,vector<int> adj[]){
        vis[i]=true;
        for(auto x:adj[i]){
            if(vis[x]==false){
                dfs(x,vis,adj);
            }
        }
    }
    int makeConnected(int n, vector<vector<int>>& a) {
       vector<int>adj[n+1];
        vector<bool> vis(n,false);
        
        int edges=0;
         for(auto x: a) {
            adj[x[0]].push_back(x[1]);
            adj[x[1]].push_back(x[0]);
             edges++;
        }
        
        int cc=0;
        for(int i=0;i<n;i++){
            if(vis[i]==false){
                cc++;
                dfs(i,vis,adj);
            }
        }
        if(edges<n-1)
            return -1;
        int red=edges-((n-1)-(cc-1));
        // cout<<red<<" "<<cc;
        if(red>=cc-1)
            return cc-1;
        return -1;
        
    }
};
