#include<bits/stdc++.h>
using namespace std;

int vis[8][8];
int level[8][8];

int getX(string s){
	return s[0]-'a';
}
int getY(string s){
	return s[1]-'1';
}
vector<pair<int,int> > movements={
	{-1,2},{1,2},
	{-1,-2},{1,-2},
	{2,-1},{2,1},
	{-2,-1},{-2,1}
};
bool isVal(int x,int y){
	return x>=0 && y>=0 && x<8 && y<8;
}
int bfs(string src,string dest){
 int srcX=getX(src);
 int srcY=getY(src);
 int destX=getX(dest);
 int destY=getY(dest);

 queue<pair<int,int> >q;
 q.push({srcX,srcY});
 vis[srcX][srcY]=1;
 level[srcX][srcY]=0;
 while(!q.empty()){
 	pair<int,int> v=q.front();
 	int x=v.first;
 	int y=v.second;
   q.pop();
   for(auto movement:movements){
   	int childX=movement.first+x;
   	int childY=movement.second+y;
   	if(!isVal(childX,childY))continue;
   	if(!vis[childX][childY]){
   		q.push({childX,childY});
   		vis[childX][childY]=1;
   		level[childX][childY]=level[x][y]+1;
   	}
   }
   if(level[destX][destY]!=0){
   	break;
   }
 }
 return level[destX][destY];
}

int main(){
   string s1,s2;;
   cin>>s1>>s2;

   cout<<bfs(s1,s2);
}
