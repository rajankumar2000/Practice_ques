#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* left;
    Node* right;
};

Node* CreateNode(int data){
    Node* newNode=new Node();
    newNode->data=data;
    newNode->left=newNode->right=NULL;
    return newNode;
}


// Node* insertNode(Node* root,int data){
//     queue<Node*> q;
//     q.push(root);

//     while(!q.empty()){
//         Node* temp=q.front();
//         q.pop();

//         if(temp->left!=NULL){
//             q.push(temp->left);
//         }else{
//             temp->left=CreateNode(data);
//             return root;
//         }
//          if(temp->right!=NULL){
//             q.push(temp->right);
//         }else{
//             temp->right=CreateNode(data);
//             return root;
//         }
//     }
// }
Node* InsertNode(Node* root, int data)
{
    // If the tree is empty, assign new node address to root
    if (root == NULL) {
        root = CreateNode(data);
        return root;
    }
 
    // Else, do level order traversal until we find an empty
    // place, i.e. either left child or right child of some
    // node is pointing to NULL.
    queue<Node*> q;
    q.push(root);
 
    while (!q.empty()) {
        Node* temp = q.front();
        q.pop();
 
        if (temp->left != NULL)
            q.push(temp->left);
        else {
            temp->left = CreateNode(data);
            return root;
        }
 
        if (temp->right != NULL)
            q.push(temp->right);
        else {
            temp->right = CreateNode(data);
            return root;
        }
    }
    return 0;
}
void inorder(Node* temp){
    if(temp==NULL)
    return;
    inorder(temp->left);
    cout<<temp->data<<" ";
    inorder(temp->right);
}

int main() {
   Node* root = CreateNode(10);
   root->left = CreateNode(11);
    root->left->left = CreateNode(7);
    root->right = CreateNode(9);
    root->right->left = CreateNode(15);
    root->right->right = CreateNode(8);

    inorder(root);
    cout<<endl;
    int key=12;
    root=InsertNode(root,key);
     inorder(root);
 return 0;
}
